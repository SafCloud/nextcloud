version: '2.1'

services:
  eelomailserver:
    image: hardware/mailserver:1.1-stable
    container_name: mailserver
    restart: unless-stopped
    domainname: ecloud.global                 # Mail server A/MX/FQDN & reverse PTR = mail.ecloud.global.
    hostname: mail
    restart: always
    networks:
      - serverbase
    ports:
      - "25:25"       # SMTP                - Required
      - "110:110"     # POP3       STARTTLS - Optional - For webmails/desktop clients
      - "143:143"     # IMAP       STARTTLS - Optional - For webmails/desktop clients
    # - "465:465"     # SMTPS      SSL/TLS  - Optional - Enabled for compatibility reason, otherwise disabled
      - "587:587"     # Submission STARTTLS - Optional - For webmails/desktop clients
      - "993:993"     # IMAPS      SSL/TLS  - Optional - For webmails/desktop clients
      - "995:995"     # POP3S      SSL/TLS  - Optional - For webmails/desktop clients
      - "4190:4190"   # SIEVE      STARTTLS - Optional - Recommended for mail filtering
    environment:
      - DBPASS=${DBPASS}                   # MariaDB database password (required)
      - RSPAMD_PASSWORD=${RSPAMD_PASSWORD}
      - ADD_DOMAINS=${ADD_DOMAINS}
    # - DISABLE_DNS_RESOLVER=${DISABLE_DNS_RESOLVER}
      - ENABLE_POP3=${ENABLE_POP3}                    # Enable POP3 protocol
    # - ENABLE_FETCHMAIL=${ENABLE_FETCHMAIL}               # Enable fetchmail forwarding
    # - DISABLE_CLAMAV=${DISABLE_CLAMAV}                 # Disable virus scanning
    #  - DISABLE_SIGNING=${DISABLE_SIGNING}                # Disable DKIM/ARC signing
    # - DISABLE_GREYLISTING=${DISABLE_GREYLISTING}            # Disable greylisting policy
      - DISABLE_RATELIMITING=${DISABLE_RATELIMITING}           # Disable ratelimiting policy
    #
    # Full list : https://github.com/hardware/mailserver#environment-variables
    #
    volumes:
      - /mnt/docker/mail:/var/mail
      - /mnt/docker/letsencrypt/certstore:/etc/letsencrypt
      - /mnt/docker/mail/dovecot-custom/10-mail.conf:/etc/dovecot/conf.d/10-mail.conf
      - /mnt/docker/mail/dovecot-custom/90-quota.conf:/etc/dovecot/conf.d/90-quota.conf
      - /mnt/docker/mail/dovecot-custom/90-sieve.conf:/etc/dovecot/conf.d/90-sieve.conf
#      - /mnt/docker/mail/dovecot/dovecot.conf:/etc/dovecot/dovecot.conf
    depends_on:
      - mariadb
      - redis

  # Administration interface
  # https://github.com/hardware/postfixadmin
  # http://postfixadmin.sourceforge.net/
  # Configuration : https://github.com/hardware/mailserver/wiki/Postfixadmin-initial-configuration
  postfixadmin:
    image: registry.gitlab.e.foundation:5000/e/cloud/docker-postfixadmin
    container_name: postfixadmin
    domainname: ecloud.global
    hostname: mail
    restart: unless-stopped
    networks:
      - serverbase
    environment:
      - DBPASS=${DBPASS}
    depends_on:
      - eelomailserver
      - mariadb

  # Webmail (Optional)
  #Â https://github.com/hardware/rainloop
  # https://www.rainloop.net/
  # Configuration : https://github.com/hardware/mailserver/wiki/Rainloop-initial-configuration
  rainloop:
    #image: hardware/rainloop
    image: registry.gitlab.e.foundation:5000/e/cloud/docker-rainloop
    container_name: rainloop
    restart: unless-stopped
    networks:
      - serverbase
    volumes:
       - /mnt/docker/rainloop/data:/rainloop/data
    depends_on:
      - eelomailserver
      - mariadb

  # Database
  # https://github.com/docker-library/mariadb
  # https://mariadb.org/
  mariadb:
    image: mariadb:10.2
    container_name: mariadb
    restart: unless-stopped
    networks:
      - serverbase
    # Info : These variables are ignored when the volume already exists (databases created before).
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${DBPASS}
    volumes:
      - /mnt/docker/mysql/db:/var/lib/mysql

  # Cache Database
  # https://github.com/docker-library/redis
  # https://redis.io/
  redis:
    image: redis:4.0-alpine
    container_name: redis
    restart: unless-stopped
    networks:
      - serverbase
    command: redis-server --appendonly yes
    volumes:
      - /mnt/docker/redis/db:/data
  pma:
    image: phpmyadmin/phpmyadmin
    container_name: pma
    restart: unless-stopped
    networks:
      - serverbase
    environment:
      - PMA_HOST=${PMA_HOST}
    depends_on:
      - mariadb
  vhosts:
        image: registry.gitlab.e.foundation:5000/e/cloud/docker-phpbase
        container_name: vhosts
        environment:
         - DOMAINS=${VHOSTS_DOMAINS}
        restart: unless-stopped
        networks:
          - serverbase
        volumes:
              - /mnt/docker/www:/var/www/
        depends_on:
              - mariadb
  accounts:
        image: registry.gitlab.e.foundation:5000/e/cloud/docker-welcome
        container_name: accounts
        environment:
         - DOMAINS=${VHOSTS_ACCOUNTS}
         - PFDB_HOST=${PFDB_HOST}
         - PFDB_DB=${PFDB_DB}
         - PFDB_USR=${PFDB_USR}
         - PFDB_PW=${DBPASS}
         - SMTP_HOST=${SMTP_HOST}
         - SMTP_FROM=${SMTP_FROM}
         - SMTP_PW=${SMTP_PW}
        restart: unless-stopped
        networks:
          - serverbase
        volumes:
              - /mnt/docker/www:/var/www/
              - /mnt/docker/accounts:/var/accounts
              - /mnt/docker/accounts/id_rsa_postfixadmincontainer:/home/www-data/.ssh/id_rsa
              - /mnt/docker/accounts/exclude_names:/var/script/exclude_names
        depends_on:
              - mariadb
##################################################################################################################################
  nextcloud:
    image: nextcloud
    container_name: nextcloud
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE_NC}
      - MYSQL_USER=${MYSQL_USER_NC}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD_NC}
      - MYSQL_HOST=${MYSQL_HOST_NC}
      - NEXTCLOUD_ADMIN_USER=${NEXTCLOUD_ADMIN_USER}
      - NEXTCLOUD_ADMIN_PASSWORD=${NEXTCLOUD_ADMIN_PASSWORD}
    restart: unless-stopped
    networks:
      - serverbase
    volumes:
      - /mnt/docker/nextcloud/html:/var/www/html/
      - /mnt/docker/nextcloud/custom_apps:/var/www/html/custom_apps/
      - /mnt/docker/nextcloud/config:/var/www/html/config/
      - /mnt/docker/nextcloud/data:/var/www/html/data/
    depends_on:
      - mariadb  
##################################################################################################################################
  onlyoffice-documentserver:
    image: onlyoffice/documentserver:latest
    container_name: onlyoffice-document-server
    stdin_open: true
    restart: always
    networks:
      - serverbase
    volumes:
     - /mnt/docker/onlyoffice/DocumentServer/data:/var/www/onlyoffice/Data
     - /mnt/docker/onlyoffice/DocumentServer/logs:/var/log/onlyoffice
  onlyoffice-mail-server:
    image: onlyoffice/mailserver:latest
    container_name: onlyoffice-mail-server
    hostname: cleus.eu
    stdin_open: true
    restart: always
    networks:
      - serverbase
    #ports:
    #  - 25:25
    #  - 143:143
    #  - 587:587
    volumes:
     - /mnt/docker/onlyoffice/MailServer/data:/var/vmail
     - /mnt/docker/onlyoffice/MailServer/data/certs:/etc/pki/tls/mailserver
     - /mnt/docker/onlyoffice/MailServer/logs:/var/log
     - /mnt/docker/onlyoffice/MailServer/mysql:/var/lib/mysql
  onlyoffice-community-server:
    image: onlyoffice/communityserver:latest
    container_name: onlyoffice-community-server
    restart: always
    networks:
      - serverbase
    ports:
      - 5222:5222
    environment:
      - DOCUMENT_SERVER_PORT_80_TCP_ADDR=${DOCUMENT_SERVER_PORT_80_TCP_ADDR}
      - MAIL_SERVER_DB_HOST=${MAIL_SERVER_DB_HOST}
    volumes:
     - /mnt/docker/onlyoffice/CommunityServer/data:/var/www/onlyoffice/Data
     - /mnt/docker/onlyoffice/CommunityServer/mysql:/var/lib/mysql
     - /mnt/docker/onlyoffice/CommunityServer/logs:/var/log/onlyoffice
     - /mnt/docker/onlyoffice/DocumentServer/data:/var/www/onlyoffice/DocumentServerData
    depends_on:
      - onlyoffice-documentserver
      - onlyoffice-mail-server
  nginx:
    image: wonderfall/boring-nginx
    container_name: nginx
    restart: unless-stopped
    networks:
      - serverbase
    ports:
      - "80:8000"
      - "443:4430"
    volumes:
      - /mnt/docker/nginx/sites-enabled:/sites-enabled
      - /mnt/docker/nginx/conf:/conf.d
      - /mnt/docker/nginx/log:/var/log/nginx
      - /mnt/docker/letsencrypt/certstore:/certs
      - /mnt/docker/nginx/passwds:/passwds
    depends_on:
      - onlyoffice-community-server
#docker run -d --name automx -e VIRTUAL_HOST=autoconfig.eelo.io,autodiscover.eelo.io -e DOMAIN=eelo.io -e HOSTANME=automx seti/mailstack-automx
  automx:
    image: seti/mailstack-automx
    container_name: automx
    hostname: automx
    environment:
      - VIRTUAL_HOST=${VIRTUAL_HOST}
      - DOMAIN=${DOMAIN}
      - HOSTNAME=${HOSTNAME}
    restart: unless-stopped
    networks:
      - serverbase
    volumes:
      - /mnt/docker/automx/automx.conf:/etc/automx.conf
  #rocketchat:
  #  image: rocketchat/rocket.chat:latest
  #  container_name: rocketchat
  #  networks:
  #    - serverbase
  #  restart: unless-stopped
  #  volumes:
  #    - /mnt/docker/rocket/uploads:/app/uploads
  #  environment:
  #    - PORT=3000
  #    - ROOT_URL=https://rocket.eelo.io/
  #    - MONGO_URL=mongodb://mongo:27017/rocketchat
  #    - MONGO_OPLOG_URL=mongodb://mongo:27017/local
  #    - MAIL_URL=smtp://smtp.email
#       - HTTP_PROXY=http://proxy.domain.com
#       - HTTPS_PROXY=http://proxy.domain.com
  #  depends_on:
  #    - mongo
  #  ports:
  #    - 3000:3000
  #  labels:
  #    - "traefik.backend=rocketchat"
  #    - "traefik.frontend.rule=Host: rocket.eelo.io"

  #mongo:
  #  image: mongo:3.2
  #  restart: unless-stopped
  #  networks:
  #    - serverbase
  #  volumes:
  #   - /mnt/docker/rocket/data/db:/data/db
  #   - /mnt/docker/rocket/data/dump:/dump
  #  command: mongod --smallfiles --oplogSize 128 --replSet rs0
  #  labels:
  #    - "traefik.enable=false"

  # this container's job is just run the command to initialize the replica set.
  # it will run the command and remove himself (it will not stay running)
#  mongo-init-replica:
#    image: mongo:3.2
#    command: 'mongo mongo/rocketchat --eval "rs.initiate({ _id: ''rs0'', members: [ { _id: 0, host: ''localhost:27017'' } ]})"'
#    depends_on:
#      - mongo

  # hubot, the popular chatbot (add the bot user first and change the password before starting this image)
 # hubot:
 #   image: rocketchat/hubot-rocketchat:latest
 #   restart: unless-stopped
 #   environment:
 #     - ROCKETCHAT_URL=rocketchat:3000
 #     - ROCKETCHAT_ROOM=GENERAL
 #     - ROCKETCHAT_USER=bot
 #     - ROCKETCHAT_PASSWORD=:v7e-Db?c1tk
 #     - BOT_NAME=bot
  # you can add more scripts as you'd like here, they need to be installable by npm
 #     - EXTERNAL_SCRIPTS=hubot-help,hubot-seen,hubot-links,hubot-diagnostics
 #   depends_on:
 #     - rocketchat
 #   labels:
 #     - "traefik.enable=false"
 #   volumes:
 #     - /mnt/docker/rocket/hubot/scripts:/home/hubot/scripts
  # this is used to expose the hubot port for notifications on the host on port 3001, e.g. for hubot-jenkins-notifier
 #   ports:
 #     - 3001:8080
networks:
  serverbase:
    driver: 'bridge'
